# Global ARGs for all build stages
# https://docs.docker.com/build/building/multi-stage/

ARG USERNAME=user
ARG WORKSPACE_DIR=/home/condensed-sparsity

# We use this image as latest tag is still on py37
FROM pytorch/pytorch:1.11.0-cuda11.3-cudnn8-devel AS pytorch-base
ARG USERNAME
ARG WORKSPACE_DIR

SHELL ["/bin/bash", "-c"]

# Deal with nvidia GPG key issues
# https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/
ARG DISTRO=ubuntu1804
ARG ARCH=x86_64
RUN rm /etc/apt/sources.list.d/cuda.list
RUN rm /etc/apt/sources.list.d/nvidia-ml.list
RUN apt-key del 7fa2af80
RUN apt-get update && apt-get install -y wget
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/$DISTRO/$ARCH/cuda-keyring_1.0-1_all.deb \
    && dpkg -i cuda-keyring_1.0-1_all.deb

# Use a non-root user
ARG USER_UID=1000
ARG USER_GID=${USER_UID}

# Create the user
RUN groupadd --gid $USER_GID ${USERNAME} \
    && useradd --uid $USER_UID --gid $USER_GID -m ${USERNAME}

RUN mkdir ${WORKSPACE_DIR}/ && \
    chown -R $USER_GID:$USER_UID ${WORKSPACE_DIR}

# Development extras
FROM pytorch-base AS dev-container-base
ARG USERNAME
ARG WORKSPACE_DIR

# Install git/ssh/tmux
RUN apt-get update \
    && apt-get install -y git ssh tmux vim curl htop sudo

RUN echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

FROM dev-container-base AS poetry-base
# Install poetry
# https://python-poetry.org/docs/configuration/#using-environment-variables
ARG USERNAME
ARG WORKSPACE_DIR
USER $USERNAME
ENV POETRY_VERSION="1.2.0" \
    POETRY_HOME="/home/${USERNAME}/poetry" \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=false \
    BUILD_PATH="/home/${USERNAME}/build" \
    VENV_PATH="/home/${USERNAME}/build/.venv" \
    NVIDIA_DRIVER_CAPABILITIES="all" \
    WORKSPACE_DIR=${WORKSPACE_DIR} \
    PATH="/home/${USERNAME}/.local/bin:${PATH}" \
    VIRTUAL_ENV=$VENV_PATH

ENV PATH="$VENV_PATH/bin:$POETRY_HOME/bin:$PATH"

RUN curl -sSL https://install.python-poetry.org | python3 - && exec bash

# Install project requirements 
RUN mkdir ${BUILD_PATH}
WORKDIR ${BUILD_PATH}
COPY ./pyproject.toml ./poetry.lock ./
RUN python -m venv .venv && \ 
    source .venv/bin/activate && \
    pip install --upgrade pip && \
    poetry install -vvv --no-root

RUN echo "source ${BUILD_PATH}/.venv/bin/activate" >> /home/$USERNAME/.bashrc

WORKDIR $WORKSPACE_DIR
