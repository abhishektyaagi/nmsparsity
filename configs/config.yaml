defaults:
  - dataset: cifar10
  - model: wide_resnet22
  - _self_

experiment:
  comment: erk_testing
  name: ${model.name}_${dataset.name}_${experiment.comment}

paths:
  data_folder: /home/condensed-sparsity/data
  artifacts: /home/condensed-sparsity/artifacts
  logs: /home/condensed-sparsity/logs

rigl: 
  # percentage of dense parameters allowed. if None, pruning will not 
  # be used. must be on the interval (0, 1]
  dense_allocation: 0.1
  # delta param for pruning
  delta: 100
  # number of gradients to accumulate before scoring for rigl",
  grad_accumulation_n: 1
  # alpha param for pruning
  alpha: 0.3
  # if 1, use random sparsity topo and remain static"
  static_topo: 0
  # If True, use const_fan_in scheduler.
  const_fan_in: False
  # Define layer-wise sparsity distribution. Options include `uniform` & `erk`
  sparsity_distribution: erk
  # Power scale for ERK distribution
  erk_power_scale: 1.0

training:
  # "input batch size for training (default: 64)
  batch_size: 64
  # input batch size for testing (default: 1000)
  test_batch_size: 1000
  # number of epochs to train (default: 14)
  epochs: 50
  # Learning rate after warmup (default: 0.01)
  lr: 0.1
  # Learning rate for first epoch of warm up
  init_lr: 0
  # Number of epochs to warm up for
  warm_up_steps: 5
  # Learning rate step gamma (default: 0.7)  NOT USED!
  gamma: 0.7
  # quickly check a single pass
  dry_run: False
  # random seed (default: 1)
  seed: 1
  # how many batches to wait before logging training status
  log_interval: 10
  # For Saving the current Model
  save_model: True
  weight_decay: 0  # 5.0e-4 -> rigl value
  # L2 Regularization for optimizer
  momentum: 0.9  # 0.9 -> rigl value
  # Momentum coefficient for SGD optimizer
  optimizer: "adadelta" # "sgd", "adamw"

compute:
  # disables CUDA training",
  no_cuda: False
  cuda_kwargs: {"num_workers": 1, "pin_memory": True, "shuffle": True}

wandb:
  project: condensed-rigl
  entity: condensed-sparsity
  start_method: thread

hydra:  
  run:
    dir: ${paths.logs}
