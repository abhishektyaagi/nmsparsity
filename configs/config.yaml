defaults:
  - dataset: mnist
  - model: mnist
  - _self_

experiment:
  comment: missing_sweep_${rigl.dense_allocation}_${rigl.const_fan_in}
  name: ${model.name}_${dataset.name}_${experiment.comment}
  sweep: True
  resume_from_checkpoint: True
  run_id: 1hz0vtiw

paths:
  base: ${oc.env:BASE_PATH}
  data_folder: ${paths.base}/data
  artifacts: ${paths.base}/artifacts
  logs: ${paths.base}/logs
  checkpoints: ${paths.artifacts}/checkpoints

rigl: 
  # percentage of dense parameters allowed. if None, pruning will not 
  # be used. must be on the interval (0, 1]
  dense_allocation: 0.5
  # delta param for pruning
  delta: 100
  # number of gradients to accumulate before scoring for rigl
  grad_accumulation_n: 1
  # alpha param for pruning for cosine decay in determining how many connections to prune/regrow
  alpha: 0.3
  # if 1, use random sparsity topo and remain static
  static_topo: 0
  # If True, use const_fan_in scheduler.
  const_fan_in: False
  # Define layer-wise sparsity distribution. Options include `uniform` & `erk`
  sparsity_distribution: erk
  # Power scale for ERK distribution
  erk_power_scale: 1.0

training:
  # quickly check a single pass",
  dry_run: False
  # input batch size for testing (default: 1000)
  batch_size: 128
  # number of epochs to train (default: 250)
  test_batch_size: 1000
  # number of epochs to train (default: 14)
  epochs: 250
  # random seed (default: 1)
  seed: 42
  # Log interval (number of steps / iterations)
  log_interval: 10000
  # For Saving the current Model
  save_model: True

  ## Optimization
  optimizer: sgd # "sgd", "adamw"
  # L2 Regularization for optimizer
  weight_decay: 5.0e-4  # 5.0e-4 -> rigl value
  # Momentum coefficient for SGD optimizer
  momentum: 0.9  # 0.9 -> rigl value


  ## Scheduler
  scheduler: step_lr # cosine_annealing_with_warm_up, step_lr_with_warm_up
  # Learning rate after warmup (default: 0.01)",
  lr: 0.1
  # Learning rate for first epoch of warm up, only applies to schedulers with linear warm up
  init_lr: 0
  # Number of epochs to warm up for linear warm ups
  warm_up_steps: 5
  # Learning rate step gamma
  gamma: 0.2
  # Step size to use in learning rate scheduler if StepLR is used.
  step_size: 30000


compute:
  # disables CUDA training",
  no_cuda: False
  cuda_kwargs: {"num_workers": 1, "pin_memory": True, "shuffle": True}

wandb:
  project: condensed-rigl
  entity: condensed-sparsity
  start_method: thread

hydra:  
  run:
    dir: ${paths.logs}
